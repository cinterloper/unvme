{"name":"Unvme","tagline":"User Space NVMe Driver","body":"UNVMe - A User Space NVMe Driver Project\r\n========================================\r\n\r\nUNVMe is a user space NVMe driver developed at Micron Technology for the\r\npurpose of benchmarking different polling models in comparison to the\r\nkernel space NVMe driver interupt driven model.\r\n\r\nThe UNVMe driver depends on features provided by the vfio module in the\r\nLinux kernel (introduced since 3.6).\r\n\r\nFrom the application perspective, UNVMe provides a single library (libunvme.a)\r\nwith a set of custom APIs for accessing NVMe devices.\r\n\r\nIn this project, UNVMe is implemented as three distinct models:\r\n\r\n    model_apc   -   Using this library model, an application will have\r\n                    exclusive access to a given NVMe device, where the\r\n                    application will process the completion queue at the time\r\n                    of checking for an I/O status.  In this model, there will\r\n                    be no context switch in the submission and completion paths.\r\n\r\n\r\n    model_tpc   -   Using this library model, an application will have\r\n                    exclusive access to a given NVMe device, where a built-in\r\n                    thread will automatically process I/O completion, and\r\n                    the application can retrieve results when checking for\r\n                    an I/O status.  In this model, there may be context\r\n                    switch in the completion process.\r\n\r\n    model_cs    -   Using the client/server model, the driver will run\r\n                    as a background service to manage a set of NVMe devices\r\n                    and receive requests from client applications.\r\n                    A client application which runs in a separate process can\r\n                    send requests to the driver.  This model is similar to\r\n                    the traditional driver model which allows one or more\r\n                    applications to access a device.  In this model, there may\r\n                    be context switch in both submission and completion paths.\r\n\r\nA selected model can be built by specifying the named target.\r\nAll three models export the same set of library APIs.\r\n\r\nIt should be noted that the UNVMe interface is designed to allow the user\r\nto create a specified number of I/O submission-completion queue pairs.\r\nThe queues will be created exclusively for and when a session is opened.\r\nFor multi-threaded applications, an application thread can perform I/O on\r\none or more queues, but a queue must only be accessed by a single thread\r\nin order to guarantee thread-safe operations.\r\n\r\n\r\nSystem Requirements\r\n===================\r\n\r\nUNVMe has only been built and tested on CentOS 6 and 7 running on x86_64 CPU\r\nbased systems with vfio support which requires the following features:\r\n\r\n    VT-d        -   Hardware must have Intel CPU that supports VT-d\r\n                    (Virtualization Technology for Directed I/O).\r\n                \r\n    vfio        -   Linux kernel 3.6 or later, and the kernel must be built\r\n                    with these configurations enabled:\r\n\r\n                        CONFIG_IOMMU_API=y\r\n                        CONFIG_IOMMU_SUPPORT=y\r\n                        CONFIG_INTEL_IOMMU=y\r\n                        CONFIG_VFIO=m\r\n                        CONFIG_VFIO_PCI=m\r\n                        CONFIG_VFIO_IOMMU_TYPE1=m\r\n\r\n\r\nBuild and Run\r\n=============\r\n\r\nThe Makefile.def file is provided for the user to specify the default\r\nmodel to build when running:\r\n\r\n    $ make\r\n\r\nA specific model can also be built by explicitly specifying one of the\r\nfollowing targets:\r\n\r\n    $ make model_apc\r\n    $ make model_tpc\r\n    $ make model_cs\r\n\r\nMake will keep track of the last built model (until clean) and will default\r\nto remake that model before using the DEFAULT_MODEL setting in Makefile.def.\r\n\r\n\r\nWhen building model_apc or model_tpc, make will produce a 'libunvme.a' library.\r\nWhen building the model_cs, make will produce a 'libunvme.a' library and\r\na 'unvme' executable which is the driver to be run as a service.\r\n\r\nIf the model_cs is built, then the service needs to be run specifying a list\r\nof mapped vfio devices as its arguments, i.e. prior to running applications.\r\nFor example:\r\n\r\n    $ src/unvme /dev/vfio/X /dev/vfio/Y ...\r\n\r\nThe UNVMe runtime log messages will be saved in /dev/shm/unvme.log.\r\n\r\n\r\nBefore running the UNVMe service or applications, the user must first run\r\nthe setup script once to bind all the NVMe to vfio devices using the following\r\ncommand:\r\n\r\n    $ test/unvme-setup\r\n\r\nTo reset the devices to the default NVMe kernel space drivers, run command:\r\n\r\n    $ test/unvme-setup reset\r\n\r\n\r\nApplications and Tests\r\n======================\r\n\r\nApplications can be built using the libunvme.h and libunvme.a interfaces.\r\nThe library provides the APIs for UNVMe as well as direct NVMe commands\r\nwith vfio functions support for DMA allocation.\r\n\r\nExamples of both UNVMe and NVMe level testing are provided under the test\r\ndirectory.\r\n\r\nUNVMe test applications can be run as:\r\n\r\n    $ test/unvme/unvme_api_test /dev/vfio/X\r\n    $ test/unvme/unvme_mts_test /dev/vfio/X\r\n    ...\r\n\r\n\r\nNVMe direct access tests (bypassing UNVMe driver) can be run as:\r\n\r\n    $ test/nvme/nvme_identify /dev/vfio/X          # identify controller\r\n    $ test/nvme/nvme_identify /dev/vfio/X 1        # identify namespace 1\r\n    $ test/nvme/nvme_get_log_page /dev/vfio/X 1 1  # get log page error info\r\n    $ test/nvme/nvme_get_log_page /dev/vfio/X 1 2  # get log page SMART health\r\n    $ test/nvme/nvme_get_log_page /dev/vfio/X 1 3  # get log page firmware slot\r\n    ...\r\n\r\n\r\nBenchmark\r\n=========\r\n\r\nUNVMe has been benchmarked with fio (Flexible I/O Tester) using the test\r\nscript test/unvme-benchmark.  The ioengine/unvme_fio is provided for\r\nthis purpose.  In order to build the unvme_fio engine, the user must either\r\nset the FIO_DIR variable to point to the fio source path in the Makefile.def\r\nor specify FIO_DIR on the make command line as:\r\n\r\n    $ FIO_DIR=/path/fio make model_apc\r\n\r\n\r\nTo produce benchmark results for UNVMe model_apc, run:\r\n\r\n    $ test/unvme-setup  # only need to be done once if has not\r\n    $ make model_apc\r\n    $ OUTDIR=out/apc test/unvme-benchmark /dev/vfio/X\r\n\r\nTo produce benchmark results for UNVMe model_tpc, run:\r\n\r\n    $ make model_tpc\r\n    $ OUTDIR=out/tpc test/unvme-benchmark /dev/vfio/X\r\n\r\nTo produce benchmark results for UNVMe model_cs, run:\r\n\r\n    $ make model_cs\r\n    $ src/unvme /dev/vfio/X ...\r\n    $ OUTDIR=out/cs test/unvme-benchmark /dev/vfio/X\r\n\r\n\r\nTo reset and get benchmark results for the NVMe kernel space driver, run:\r\n\r\n    $ test/unvme-setup reset\r\n    $ OUTDIR=out/nvme test/unvme-benchmark /dev/nvme0n1\r\n\r\n\r\nNotes on unvme-benchmark script:\r\n\r\n    + The unvme-benchmark script will run fio tests for random read and then\r\n      random write using 1, 4, 8, and 16 jobs (threads) with iodepth of\r\n      1, 4, 8, 16, 32, and 64.\r\n\r\n    + For UNVMe, the number of fio jobs will be translated to the number of\r\n      queues and iodepth (+1) will be the queue size.\r\n\r\n    + The default output directory will be \"out\" relative to the test directory\r\n      where the unvme-benchmark script resides.  The outut directory can also\r\n      be overriden by specifying OUTDIR on the shell command line.\r\n\r\n    + If the tested device nsid is other than 1 then the variable NSID must be\r\n      specified on the shell command line.\r\n\r\n    + The FIO_DIR should be set in Makefile.def where the fio source code\r\n      and executable are found.\r\n\r\n\r\nDocumentation\r\n=============\r\n\r\nDoxygen formatted documents for the source code can be generated as:\r\n\r\n    $ make doc\r\n\r\nThe output HTML based document can then be browsed from doc/html/index.html.\r\n\r\n\r\nQuestions and Comments:\r\n=======================\r\n\r\nPlease feel free to create new issue for questions and comments.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}